#ifndef __TLISTAPORO_H__
#define __TLISTAPORO_H__


#include "tvectorporo.h"
#inlcude "tpilaporo.h"
#include "tporo.h" 
#include <iostream>
using namespace std;
//! \file tlistaporo.h
//! \brief Cabeceras de la clase TListaPoro, TListaNodo y TListaPosicion

class TPilaCom;
class TListaCom;

//! \class TListaNodo
/*!	\brief Nodos para la lista TListaPoro*/

class TListaNodo
{
	friend class TListaPosicion;
	friend class TListaPoro;
	friend class TPilaPoro;
	public:
		//! \brief Constructor por defecto de TListaNodo
		/*!	Construye un objeto de tipo TListaNodo sin par치metros*/
		TListaNodo ();
		//! \brief Constructor de copia de TListaNodo
		/*!	Construye un objeto de tipo TListaNodo a partir de otro*/
		TListaNodo (const TListaNodo &);
		//! \brief Destructor de TListaNodo
		/*!	Pone a 0 todos los campos*/
		~TListaNodo ();
		//! \brief Operator = de TListaNodo
		/*!	Asigna un objeto de tipo TListaNodo a otro*/
		TListaNodo & operator=(const TListaNodo &);

		friend ostream & operator<<(ostream &, const TListaPoro &);
		friend ostream & operator<<(ostream &, const TPilaPoro &);
	private:
		//! \brief TPoro e
		/*!	Contiene el valor del nodo*/
		TPoro e;
		//! \brief TListaNodo *anterior
		/*!	Apunta al nodo anterior*/
		TListaNodo *anterior;
		//! \brief TListaNodo *siguiente
		/*!	Apunta al nodo siguiente*/
		TListaNodo *siguiente;
};


//! \class TListaPosicion
/*!	\brief Clase que almacena un puntero a un nodo de la lista*/

class TListaPosicion
{
	friend class TListaPoro;
	friend class TPilaPoro;
	public:
		//! \brief Constructor por defecto de TListaPos
		/*!	Construye un objeto de tipo TListaPos*/
		TListaPosicion ():pos(0){};
		//! \brief Constructor de copia de TListaPos
		/*!	Construye un TListaPos a partir de otro*/
		TListaPosicion(const TListaPos &);
		//! \brief Destructor de TListaPos
		/*!	Pone a 0 todos sus campos*/
		~TListaPosicion ();
		//! \brief Operator = de TListaPos
		/*!	Asigna un TListaPos a otro*/
		TListaPosicion & operator=(const TListaPos &);
		//! \brief Operator == de TListaPos
		/*!	Devuelve true si ambos son iguales*/
		bool operator==(const TListaPos & p)const;
		//! \brief Operator != de TListaPos
		/*!	Devuelve true si son distintos*/
		bool operator!=(const TListaPos & p)const;
		//! \brief Anterior
		/*!	Devuelve un TListaPos que apunta al nodo anterior*/
		TListaPosicion Anterior() const;
		//! \brief Siguiente
		/*!	Devuelve un TListaPos que apunta al nodo siguiente*/
		TListaPosicion Siguiente() const;
		//! \brief EsVacia
		/*!	Devuelve true si el objeto no apunta a ningun TListaNodo*/
		bool EsVacia(){return pos == NULL;};

		friend ostream & operator<<(ostream &, const TListaPosicion&);
		friend ostream & operator<<(ostream &, const TPilaPoro &);
	private:
		//! \brief TListaNodo *pos
		/*!	Apunta a un TListaNodo*/
		TListaNodo *pos;

};

//! \class TListaPoro
/*!	\brief Clase que maneja una lista*/

class TListaPoro
{
	public:
		//! \brief Constructor por defecto de TListaCom
		/*!	Construye un objeto de tipo TListaPoro sin parametros*/
		TListaPoro ():primero(NULL), ultimo(NULL){};
		//! \brief Constructor de copia de TListaCom
		/*!	Construye un TListaPoro a partir de otro*/
		TListaPoro (const TListaPoro &);
		//! \brief Destructor de TListaPoro
		/*!	Libera la memoria din치mica de la lista de poros*/
		~TListaPoro ();
		//! \brief Operator = de TListaPoro
		/*!	Asigna una lista a otra*/
		TListaPoro & operator=(const TListaPoro &);
		//! \brief Operator == de TListaPoro
		/*!	Devuelve true si 2 listas tienen los mismos elementos en el mismo orden*/
		bool operator==(const TListaPoro &) const;
		//! \brief Operator != de TListaPoro
		/*!	Devuelve true si las listas son distintas*/
		bool operator!=(const TListaPoro &) const;
		//! \brief Operator + de TListaPoro
		/*!	Devuelve una lista producto de concatenar las 2 listas*/
		TListaPoro operator+(const TListaPoro &) const;
		//! \brief Operator - de TListaCom
		/*!	Devuelve una lista que contiene los elementos de this que no estan en el argumento*/
		TListaPoro operator-(const TListaPoro &) const;
		//! \brief EsVacia
		/*!	Devuelve true si la lista es vacia*/
		bool EsVacia() const;
		//! \brief Insertar
		/*!	A침ade un TPoro a lista.*/
		bool Insertar(const TPoro&)
		//! \brief Borrar (TComplejo)
		/*!	Borra la primera aparici칩n de un TPoro*/
		bool Borrar(const TPoro &);
		//! \brief Borrar
		/*!	Borra todas las apariciones de un TPoro*/
		bool Borrar(const TPoro &);
		//! \brief Borrar (TlistaPosicion)
		/*!	Borra la posicion indicada si pertenece a la lista*/
		bool Borrar(const TListaPosicion &);
		//! \brief Obtener
		/*!	Devuelve el valor del poro almacenado en la posicion dada, si esta pertenece a la lista*/
		TPoro Obtener(const TListaPosicion &) const;
		//! \brief Buscar
		/*!	Devuelve true si el poro existe en la lista*/
		bool Buscar(const TPoro &) const;
		//! \brief Primera
		/*!	Devuelve un TListaPosicion que apunta al primer elemento de la lista*/
		TListaPosicion Primera() const;
		//! \brief Ultima
		/*!	Devuelve un TListaPosicion que apunta al ultimo elemento de la lista*/
		TListaPosicion Ultima() const;
		//! \brief Operator << de TListaPoro
		/*!	Saca por pantalla una lista entre {}*/
		friend ostream & operator<<(ostream &, const TListaPoro &);
		
	private:
		//! \brief TListaNodo *primero
		/*!	Primer TListaNodo de la lista*/
		TListaNodo *primero;
		//! \brief TListaNodo *ultimo
		/*!	Ultimo TListaNodo de la lista*/
		TListaNodo *ultimo;
		//! \brief PerteneceALista
		/*!	Devuelve true si una TListaPosicion pertenece a la lista (private)*/
		bool PerteneceALista(const TListaPosicion &) const;

};
#endif
